"""
Django settings for agol_indexer project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

from confy import env, database
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(__file__)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', 'OurSecretKey')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', False)

if not DEBUG:
    ALLOWED_HOSTS = [env('ALLOWED_DOMAIN'), ]
else:
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'admin_reorder',
    'agol',
    'groups',
    'layer_source',
    'mxd',
    'agol_users',
    'web_adapter',
    'web_service',
    'webmap',
    'viewer',
    'joins'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'dpaw_utils.middleware.SSOLoginMiddleware',
    'admin_reorder.middleware.ModelAdminReorder'
]

ROOT_URLCONF = 'agol_indexer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'agol_indexer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    # Defined in the DATABASE_URL env variable.
    'default': database.config(default=os.path.join(BASE_DIR, 'agolIndexer.sqlite3'))
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/
LANGUAGE_CODE = 'en-AU'
TIME_ZONE = 'Australia/Perth'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(BASE_DIR, 'assets'),
)


# Logging settings
# Ensure that the logs directory exists:
if not os.path.exists(os.path.join(BASE_DIR, 'logs')):
    os.mkdir(os.path.join(BASE_DIR, 'logs'))
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        }
    },
    'handlers': {
        'agol_log': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'agol.log'),
            'formatter': 'simple',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['agol_log'],
            'level': 'INFO'
        },
        'agol': {
            'handlers': ['agol_log'],
            'level': 'INFO'
        }
    }
}
# Supplement some settings when DEBUG is True.
if DEBUG:
    LOGGING['loggers']['django.request']['level'] = 'DEBUG'
    LOGGING['loggers']['agol']['level'] = 'DEBUG'


ADMIN_REORDER = (
    {
        'app': 'layer_source',
        'models': (
            'layer_source.Layer_Source',
            'layer_source.Layer_Source_Format',
            'layer_source.Layer_Source_Format_Type',
        )
    },
    {
        'app': 'mxd',
        'models': (
            'mxd.MXD',
            'mxd.MXD_Creator',
            'mxd.MXD_Client',
        )
    },
    {
        'app': 'web_service',
        'models': (
            'web_service.Web_Service',
            'web_service.Web_Service_Level',
        )
    },
    {
        'app': 'agol',
        'models': (
            'agol.AGOL_Item',
            'agol.AGOL_Item_Type',
        )
    },
    {
        'app': 'webmap',
        'models': (
            'webmap.Webmap',
            'webmap.Webmap_App',
            'webmap.Webmap_Contact',
            'webmap.Webmap_Item',
        )
    },
    {
        'app': 'web_service',
        'models': (
            'web_service.Web_Service',
            'web_service.Web_Service_Level',
        )
    },
    {
        'app': 'groups',
        'models': (
            'groups.Groups',
        )
    },
    {
        'app': 'agol_users',
        'models': (
            'agol_users.AGOL_User',
            'agol_users.Role',
        )
    },
    {
        'app': 'web_adapter',
        'models': (
            'web_adapter.Web_Adapter',
        )
    },
    {
        'app': 'auth',
        'models': (
            'auth.User',
            'auth.Group',
        )
    },
)
